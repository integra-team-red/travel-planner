plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version "7.2.1"
    id "org.openapi.generator" version "7.15.0"
    id "com.github.node-gradle.node" version "7.1.0"
}

def frontendPath = "$projectDir/../frontend"
def backendStaticPath = "$projectDir/src/main/resources/static"
def frontendDistPath = "$frontendPath/dist"

group = 'cloudflight.integra'
version = '0.0.1-SNAPSHOT'
description = 'backend'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

node {
    version = '22.17.1'
    npmVersion = '10.9.2'
    download = true
    nodeProjectDir = file(frontendPath)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.13.0'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.13.0'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.13.0'
    testImplementation 'org.mockito:mockito-core:5.19.0'
    testImplementation 'com.h2database:h2'
}

tasks.named('clean') {
    delete "$buildDir"
    delete "$backendStaticPath/*"
    delete frontendDistPath
}

openApiGenerate {
    generatorName = "typescript-fetch"
    inputSpec = "${projectDir}/openapi.yaml"
    outputDir = "$frontendPath/typescript-client"
    apiPackage = "api"
    modelPackage = "model"
}

tasks.register('generateOpenApiDocs', Test) {
    dependsOn testClasses
    useJUnitPlatform()

    filter {
        includeTestsMatching 'cloudflight.integra.backend.OpenApiExportTest'
    }

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    outputs.upToDateWhen { false }
}

tasks.named('openApiGenerate') {
    dependsOn tasks.named('generateOpenApiDocs')
}

tasks.register('buildFrontend', NpmTask) {
    dependsOn npmInstall
    dependsOn tasks.named('openApiGenerate')
    workingDir = file(frontendPath)
    args = ['run', 'build']
    onlyIf {
        gradle.taskGraph.hasTask(':bootJar') || gradle.taskGraph.hasTask(':build') || gradle.taskGraph.hasTask(':assemble')
    }

    doLast{
        copy {
            from frontendDistPath
            into backendStaticPath
        }
    }
}

bootJar {
    dependsOn buildFrontend
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        palantirJavaFormat()
        target 'src/**/*.java'
    }
}
