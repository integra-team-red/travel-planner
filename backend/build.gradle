plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version "7.2.1"
    id "org.openapi.generator" version "7.15.0"
    id "com.github.node-gradle.node" version "7.1.0"
}

def frontendPath = "$projectDir/../frontend"
def backendStaticPath = "$projectDir/src/main/resources/static"
def frontendDistPath = "$frontendPath/dist"

group = 'cloudflight.integra'
version = '0.0.1-SNAPSHOT'
description = 'backend'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

node {
    version = '22.17.1'
    npmVersion = '10.9.2'
    download = true
    nodeProjectDir = file(frontendPath)
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.13.0'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.13.0'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.13.0'
    testImplementation 'org.mockito:mockito-core:5.19.0'
    testImplementation 'com.h2database:h2'
}

tasks.named('clean') {
    doFirst {
        println "========================================"
        println "CLEAN: Starting clean task"
        println "========================================"
        println "  Deleting build directory: $buildDir"
        println "  Deleting openapi.yaml: $projectDir/openapi.yaml"
        println "  Deleting backend static: $backendStaticPath/*"
        println "  Deleting frontend dist: $frontendDistPath"
    }

    delete "$buildDir"
    delete "$projectDir/openapi.yaml"
    delete "$backendStaticPath/*"
    delete frontendDistPath

    doLast {
        println "CLEAN: Completed successfully"
        println "========================================\n"
    }
}

openApiGenerate {
    generatorName = "typescript-fetch"
    inputSpec = "${projectDir}/openapi.yaml"
    outputDir = "$frontendPath/typescript-client"
    apiPackage = "api"
    modelPackage = "model"
}

tasks.register('generateOpenApiDocs', Test) {
    dependsOn testClasses
    useJUnitPlatform()

    filter {
        includeTestsMatching 'cloudflight.integra.backend.OpenApiExportTest'
    }

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    outputs.upToDateWhen { false }

    doFirst {
        println "========================================"
        println "OPENAPI DOCS: Running OpenApiExportTest"
        println "========================================"
    }

    doLast {
        def openapiFile = file("${projectDir}/openapi.yaml")
        if (openapiFile.exists()) {
            println "OPENAPI DOCS: openapi.yaml generated successfully"
            println "  Location: ${projectDir}/openapi.yaml"
            println "  Size: ${openapiFile.length()} bytes"
        } else {
            println "WARNING: openapi.yaml was NOT generated!"
        }
        println "========================================\n"
    }
}

tasks.named('openApiGenerate') {
    dependsOn tasks.named('generateOpenApiDocs')
}

tasks.named('npmInstall') {
    doFirst {
        println "========================================"
        println "NPM: Installing dependencies"
        println "========================================"
        println "  Working dir: $frontendPath"
        println "  Node version: ${node.version.get()}"
        println "  NPM version: ${node.npmVersion.get()}"
    }

    doLast {
        println "NPM: Dependencies installed"
        println "========================================\n"
    }
}

tasks.register('buildFrontend', NpmTask) {
    dependsOn npmInstall
    dependsOn tasks.named('openApiGenerate')
    workingDir = file(frontendPath)
    args = ['run', 'build']

    doFirst {
        println "========================================"
        println "FRONTEND: Building frontend"
        println "========================================"
        println "  Working dir: $frontendPath"
        println "  Command: npm run build"
        println "  Task graph has bootJar: ${gradle.taskGraph.hasTask(':bootJar')}"
        println "  Task graph has build: ${gradle.taskGraph.hasTask(':build')}"
        println "  Task graph has assemble: ${gradle.taskGraph.hasTask(':assemble')}"
    }

    onlyIf {
        def shouldRun = gradle.taskGraph.hasTask(':bootJar') ||
                       gradle.taskGraph.hasTask(':build') ||
                       gradle.taskGraph.hasTask(':assemble')
        if (!shouldRun) {
            println "FRONTEND: Skipping - not in task graph"
        }
        return shouldRun
    }

    doLast {
        println "FRONTEND: Build completed"
        println "========================================"

        def distDir = file(frontendDistPath)
        if (distDir.exists() && distDir.isDirectory()) {
            def files = distDir.listFiles()
            println "FRONTEND: dist directory contents (${files?.length ?: 0} files):"
            files?.each { f ->
                println "  - ${f.name} (${f.length()} bytes)"
            }
        } else {
            println "WARNING: Frontend dist directory does NOT exist at $frontendDistPath"
        }
        println "========================================\n"

        println "========================================"
        println "FRONTEND: Copying to backend static resources"
        println "========================================"
        println "  From: $frontendDistPath"
        println "  To: $backendStaticPath"

        copy {
            from frontendDistPath
            into backendStaticPath
        }

        def staticDir = file(backendStaticPath)
        if (staticDir.exists() && staticDir.isDirectory()) {
            def staticFiles = staticDir.listFiles()
            println "FRONTEND: Backend static directory contents (${staticFiles?.length ?: 0} files):"
            staticFiles?.each { f ->
                println "  - ${f.name} (${f.length()} bytes)"
            }
        } else {
            println "WARNING: Backend static directory does NOT exist at $backendStaticPath"
        }
        println "========================================\n"
    }
}

bootJar {
    dependsOn buildFrontend

    doFirst {
        println "========================================"
        println "BOOTJAR: Building Spring Boot JAR"
        println "========================================"
        println "  Archive name: ${archiveFileName.get()}"

        def staticDir = file(backendStaticPath)
        if (staticDir.exists() && staticDir.isDirectory()) {
            def staticFiles = staticDir.listFiles()
            println "BOOTJAR: Static files to be included (${staticFiles?.length ?: 0} files):"
            staticFiles?.each { f ->
                println "  - ${f.name} (${f.length()} bytes)"
            }
        } else {
            println "WARNING: No static files found at $backendStaticPath"
        }
    }

    doLast {
        println "BOOTJAR: Completed successfully"
        println "  Output: ${archiveFile.get().asFile}"
        println "  Size: ${archiveFile.get().asFile.length()} bytes"
        println "========================================\n"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        palantirJavaFormat()
        target 'src/**/*.java'
    }
}